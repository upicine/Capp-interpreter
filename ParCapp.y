-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCapp where
import AbsCapp
import LexCapp
import ErrM

}

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%name pProgram Program
%name pListDecl ListDecl
%name pBlock Block
%name pStmt Stmt
%name pListStmt ListStmt
%name pOpAss OpAss
%name pDecl Decl
%name pArg Arg
%name pListArg ListArg
%name pListIdent ListIdent
%name pType Type
%name pExpr5 Expr5
%name pExpr4 Expr4
%name pExpr3 Expr3
%name pExpr2 Expr2
%name pExpr1 Expr1
%name pExpr0 Expr0
%name pExpr Expr
%name pListExpr ListExpr
%name pOpMul OpMul
%name pOpAdd OpAdd
%name pOpCmp OpCmp
%name pOpLog OpLog
%name pOpUnar OpUnar
%token
  '!' { PT _ (TS _ 1) }
  '%' { PT _ (TS _ 2) }
  '&&' { PT _ (TS _ 3) }
  '(' { PT _ (TS _ 4) }
  ')' { PT _ (TS _ 5) }
  '*' { PT _ (TS _ 6) }
  '+' { PT _ (TS _ 7) }
  '++' { PT _ (TS _ 8) }
  '+=' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '-=' { PT _ (TS _ 13) }
  '/' { PT _ (TS _ 14) }
  ':=' { PT _ (TS _ 15) }
  ';' { PT _ (TS _ 16) }
  '<' { PT _ (TS _ 17) }
  '<=' { PT _ (TS _ 18) }
  '=' { PT _ (TS _ 19) }
  '==' { PT _ (TS _ 20) }
  '>' { PT _ (TS _ 21) }
  '>=' { PT _ (TS _ 22) }
  'bool' { PT _ (TS _ 23) }
  'break' { PT _ (TS _ 24) }
  'continue' { PT _ (TS _ 25) }
  'else' { PT _ (TS _ 26) }
  'false' { PT _ (TS _ 27) }
  'for' { PT _ (TS _ 28) }
  'if' { PT _ (TS _ 29) }
  'int' { PT _ (TS _ 30) }
  'print' { PT _ (TS _ 31) }
  'return' { PT _ (TS _ 32) }
  'string' { PT _ (TS _ 33) }
  'to' { PT _ (TS _ 34) }
  'true' { PT _ (TS _ 35) }
  'while' { PT _ (TS _ 36) }
  '{' { PT _ (TS _ 37) }
  '||' { PT _ (TS _ 38) }
  '}' { PT _ (TS _ 39) }

  L_ident {PT _ (TV $$)}
  L_quoted {PT _ (TL $$)}
  L_integ {PT _ (TI $$)}

%%

Ident :: {
  Ident 
}
: L_ident {
  Ident $1 
}

String :: {
  String 
}
: L_quoted {
  $1 
}

Integer :: {
  Integer 
}
: L_integ {
  read $1 
}

Program :: {
  Program 
}
: ListDecl {
  AbsCapp.Program (reverse $1)
}

ListDecl :: {
  [Decl]
}
: {
  [] 
}
| ListDecl Decl ';' {
  flip (:) $1 $2 
}

Block :: {
  Block 
}
: '{' ListDecl ListStmt '}' {
  AbsCapp.BDeclBlock (reverse $2)(reverse $3)
}

Stmt :: {
  Stmt 
}
: Block {
  AbsCapp.SBlock $1 
}
| 'while' '(' Expr ')' Block {
  AbsCapp.SWhile $3 $5 
}
| 'for' '(' Ident ':=' Expr 'to' Expr ')' Block {
  AbsCapp.SFor $3 $5 $7 $9 
}
| Ident '=' Expr ';' {
  AbsCapp.SAss $1 $3 
}
| Ident '++' ';' {
  AbsCapp.SIncr $1 
}
| Ident '--' ';' {
  AbsCapp.SDecr $1 
}
| Ident OpAss Expr ';' {
  AbsCapp.SAssOp $1 $2 $3 
}
| 'if' '(' Expr ')' Block {
  AbsCapp.SIf $3 $5 
}
| 'if' '(' Expr ')' Block 'else' Block {
  AbsCapp.SIfEl $3 $5 $7 
}
| 'return' Expr ';' {
  AbsCapp.SReturnE $2 
}
| 'continue' ';' {
  AbsCapp.SCont 
}
| 'break' ';' {
  AbsCapp.SBreak 
}
| 'print' '(' Expr ')' ';' {
  AbsCapp.SPrint $3 
}
| Expr ';' {
  AbsCapp.SExpr $1 
}

ListStmt :: {
  [Stmt]
}
: {
  [] 
}
| ListStmt Stmt {
  flip (:) $1 $2 
}

OpAss :: {
  OpAss 
}
: '+=' {
  AbsCapp.OAssP 
}
| '-=' {
  AbsCapp.OAssM 
}

Decl :: {
  Decl 
}
: Type ListIdent {
  AbsCapp.DefVar $1 $2 
}
| Type Ident ':=' Expr {
  AbsCapp.DefVarExp $1 $2 $4 
}
| Type Ident '(' ListArg ')' Block {
  AbsCapp.DefFunc $1 $2 $4 $6 
}

Arg :: {
  Arg 
}
: Type Ident {
  AbsCapp.Arg $1 $2 
}

ListArg :: {
  [Arg]
}
: {
  [] 
}
| Arg {
  (:[]) $1 
}
| Arg ',' ListArg {
  (:) $1 $3 
}

ListIdent :: {
  [Ident]
}
: Ident {
  (:[]) $1 
}
| Ident ',' ListIdent {
  (:) $1 $3 
}

Type :: {
  Type 
}
: 'int' {
  AbsCapp.Int 
}
| 'string' {
  AbsCapp.Str 
}
| 'bool' {
  AbsCapp.Bool 
}

Expr5 :: {
  Expr 
}
: String {
  AbsCapp.EStr $1 
}
| Ident {
  AbsCapp.EVar $1 
}
| Integer {
  AbsCapp.EInt $1 
}
| 'true' {
  AbsCapp.ETrue 
}
| 'false' {
  AbsCapp.EFalse 
}
| Ident '(' ListExpr ')' {
  AbsCapp.EApp $1 $3 
}
| '(' Expr ')' {
  $2 
}

Expr4 :: {
  Expr 
}
: OpUnar Expr5 {
  AbsCapp.EUnar $1 $2 
}
| Expr5 {
  $1 
}

Expr3 :: {
  Expr 
}
: Expr3 OpMul Expr4 {
  AbsCapp.EMul $1 $2 $3 
}
| Expr4 {
  $1 
}

Expr2 :: {
  Expr 
}
: Expr2 OpAdd Expr3 {
  AbsCapp.EAdd $1 $2 $3 
}
| Expr3 {
  $1 
}

Expr1 :: {
  Expr 
}
: Expr1 OpCmp Expr2 {
  AbsCapp.ECmp $1 $2 $3 
}
| Expr2 {
  $1 
}

Expr0 :: {
  Expr 
}
: Expr1 OpLog Expr0 {
  AbsCapp.ELog $1 $2 $3 
}
| Expr1 {
  $1 
}

Expr :: {
  Expr 
}
: Expr0 {
  $1 
}

ListExpr :: {
  [Expr]
}
: {
  [] 
}
| Expr {
  (:[]) $1 
}
| Expr ',' ListExpr {
  (:) $1 $3 
}

OpMul :: {
  OpMul 
}
: '%' {
  AbsCapp.OMod 
}
| '*' {
  AbsCapp.OMul 
}
| '/' {
  AbsCapp.ODiv 
}

OpAdd :: {
  OpAdd 
}
: '+' {
  AbsCapp.OPlus 
}
| '-' {
  AbsCapp.OMinus 
}

OpCmp :: {
  OpCmp 
}
: '<' {
  AbsCapp.OLt 
}
| '>' {
  AbsCapp.OGt 
}
| '<=' {
  AbsCapp.OLte 
}
| '>=' {
  AbsCapp.OGte 
}
| '==' {
  AbsCapp.OEq 
}

OpLog :: {
  OpLog 
}
: '&&' {
  AbsCapp.OAnd 
}
| '||' {
  AbsCapp.OOr 
}

OpUnar :: {
  OpUnar 
}
: '!' {
  AbsCapp.ONot 
}

{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens


}

