module SkelCapp where

-- Haskell module generated by the BNF converter

import AbsCapp
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program decls -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  BDeclBlock decls stmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SBlock block -> failure x
  SWhile expr block -> failure x
  SFor ident expr1 expr2 block -> failure x
  SAss ident expr -> failure x
  SIncr ident -> failure x
  SDecr ident -> failure x
  SAssOp ident opass expr -> failure x
  SIf expr block -> failure x
  SIfEl expr block1 block2 -> failure x
  SReturnE expr -> failure x
  SCont -> failure x
  SBreak -> failure x
  SPrint expr -> failure x
  SExpr expr -> failure x
transOpAss :: OpAss -> Result
transOpAss x = case x of
  OAssP -> failure x
  OAssM -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DefVar type_ idents -> failure x
  DefVarExp type_ ident expr -> failure x
  DefFunc type_ ident args block -> failure x
transArg :: Arg -> Result
transArg x = case x of
  Arg type_ ident -> failure x
transType :: Type -> Result
transType x = case x of
  Int -> failure x
  Str -> failure x
  Bool -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EStr string -> failure x
  EVar ident -> failure x
  EInt integer -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EApp ident exprs -> failure x
  EUnar opunar expr -> failure x
  EMul expr1 opmul expr2 -> failure x
  EAdd expr1 opadd expr2 -> failure x
  ECmp expr1 opcmp expr2 -> failure x
  ELog expr1 oplog expr2 -> failure x
transOpMul :: OpMul -> Result
transOpMul x = case x of
  OMod -> failure x
  OMul -> failure x
  ODiv -> failure x
transOpAdd :: OpAdd -> Result
transOpAdd x = case x of
  OPlus -> failure x
  OMinus -> failure x
transOpCmp :: OpCmp -> Result
transOpCmp x = case x of
  OLt -> failure x
  OGt -> failure x
  OLte -> failure x
  OGte -> failure x
  OEq -> failure x
transOpLog :: OpLog -> Result
transOpLog x = case x of
  OAnd -> failure x
  OOr -> failure x
transOpUnar :: OpUnar -> Result
transOpUnar x = case x of
  ONot -> failure x

